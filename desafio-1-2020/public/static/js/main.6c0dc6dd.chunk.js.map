{"version":3,"sources":["constants.js","components/Chat.js","components/Header.js","components/SidePanel.js","App.js","index.js"],"names":["GENERIC_ERROR","Chat","setNotification","useState","value","setValue","responseJson","setResponseJson","history","setHistory","loading","setLoading","sendToWatson","msg","prevHistory","a","fetch","method","body","JSON","stringify","headers","rawResponse","ok","type","title","json","response","err","result","newHistory","output","generic","forEach","response_type","style","fontStyle","push","from","text","renewSession","sendMessageHandler","useEffect","finally","chat","document","getElementById","scrollTop","scrollHeight","spinner","Loading","className","id","height","overflow","onClick","map","m","i","key","Date","now","position","TextInput","labelText","placeholder","onKeyPress","e","onChange","target","visibility","marginTop","marginBottom","CodeSnippet","showMoreText","showLessText","copyButtonDescription","copyLabel","feedback","navigator","clipboard","writeText","AppHeader","apikey","setApikey","url","setUrl","assistantId","setAssistantId","skill","setSkill","pw","setPw","changeCredentialsHandler","password","description","aria-label","href","prefix","window","open","ModalWrapper","modalLabel","modalHeading","primaryButtonText","secondaryButtonText","iconDescription","renderTriggerButtonIcon","buttonTriggerClassName","textAlign","handleSubmit","SidePanel","submitHandler","zIndex","shouldSubmitOnEnter","buttonTriggerText","App","notification","notificationComponent","lowContrast","kind","subtitle","caption","bottom","right","onCloseButtonClick","Header","marginRight","paddingBottom","ReactDOM","render"],"mappings":"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","file":"static/js/main.6c0dc6dd.chunk.js","sourcesContent":["export const GENERIC_ERROR =\n  'Algo salió mal al comunicarse con el servidor. Asegúrate de que tu conexión sea estable e intenta nuevamente.';\n","import { Renew32, SendFilled32 } from '@carbon/icons-react';\nimport { CodeSnippet, Loading, TextInput } from 'carbon-components-react';\nimport React, { useEffect, useState } from 'react';\nimport { GENERIC_ERROR } from '../constants';\n\nconst Chat = ({ setNotification }) => {\n  const [value, setValue] = useState('');\n  const [responseJson, setResponseJson] = useState({});\n  const [history, setHistory] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const sendToWatson = async (msg, prevHistory) => {\n    const rawResponse = await fetch('/api/message', {\n      method: 'POST',\n      body: JSON.stringify({\n        msg\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (rawResponse.ok !== true) {\n      setNotification({\n        type: 'error',\n        title: 'Error',\n        msg: GENERIC_ERROR\n      });\n    } else {\n      const response = await rawResponse.json();\n      if (response.err === true) {\n        setNotification({\n          type: 'error',\n          title: 'Error',\n          msg:\n            'La sesión ha expirado. Haga clic en el botón de arriba para crear una nueva sesión.'\n        });\n      } else {\n        setResponseJson(response.result);\n        const newHistory = [...prevHistory];\n        response.result.output.generic.forEach((msg) => {\n          if (msg.response_type !== 'text') {\n            setNotification({\n              type: 'warning',\n              title: 'Mensaje de tipo desconocido recibido',\n              msg: (\n                <>\n                  Mensajes de tipo{' '}\n                  <span style={{ fontStyle: 'italic' }}>\n                    {msg.response_type}\n                  </span>{' '}\n                  no son compatibles\n                </>\n              )\n            });\n          } else {\n            newHistory.push({\n              from: 'watson',\n              msg: msg.text\n            });\n          }\n        });\n        setHistory(newHistory);\n      }\n    }\n  };\n\n  const renewSession = async () => {\n    setHistory([]);\n    setResponseJson({});\n    const rawResponse = await fetch('/api/session', {\n      method: 'POST'\n    });\n    if (rawResponse.ok !== true) {\n      setNotification({\n        type: 'error',\n        title: 'Error',\n        msg: GENERIC_ERROR\n      });\n    } else {\n      const response = await rawResponse.json();\n      if (response.err === true) {\n        setNotification({\n          type: 'error',\n          title: 'Error',\n          msg:\n            'No se pudo iniciar una sesión. Asegúrese de que sus credenciales sean correctas'\n        });\n      } else {\n        sendToWatson('', []);\n      }\n    }\n  };\n\n  const sendMessageHandler = async (msg) => {\n    if (msg) {\n      const newHistory = [...history];\n      newHistory.push({ from: 'user', msg });\n      setHistory(newHistory);\n      setValue('');\n      sendToWatson(msg, newHistory);\n    }\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    renewSession().finally(() => setLoading(false));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const chat = document.getElementById('chat-container');\n    chat.scrollTop = chat.scrollHeight;\n  }, [history, value]);\n\n  let spinner = null;\n  if (loading === true) {\n    spinner = <Loading />;\n  }\n\n  return (\n    <>\n      <div\n        className='bx--row'\n        id='chat-container'\n        style={{\n          height: '45%',\n          overflow: 'auto'\n        }}\n      >\n        <div className='bx--col' style={{ overflow: 'auto' }}>\n          <div className='chat'>\n            <button\n              onClick={() => {\n                setLoading(true);\n                renewSession().finally(() => setLoading(false));\n              }}\n              className='renew-session'\n            >\n              <Renew32 />\n            </button>\n            {spinner}\n            {history.map((m, i) => {\n              return (\n                <p key={m.msg + i + Date.now()} className={m.from}>\n                  {m.msg}\n                </p>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n      <div style={{ position: 'relative' }}>\n        <TextInput\n          id='message'\n          labelText={null}\n          placeholder='Escribe un mensaje...'\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') sendMessageHandler(value);\n          }}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n        />\n        <button\n          className='send-message'\n          style={{\n            visibility: value === '' ? 'hidden' : 'visible'\n          }}\n          onClick={() => sendMessageHandler(value)}\n        >\n          <SendFilled32 />\n        </button>\n      </div>\n      <div\n        className='bx--row'\n        style={{ marginTop: '1rem', marginBottom: '1rem' }}\n      >\n        <div className='bx--col'>\n          <h3>JSON de la última respuesta:</h3>\n          <CodeSnippet\n            type='multi'\n            showMoreText='Mostrar más'\n            showLessText='Mostrar menos'\n            copyButtonDescription='Copiar al portapapeles'\n            copyLabel='Copiar'\n            feedback='Copiado!'\n            onClick={() =>\n              navigator.clipboard.writeText(\n                JSON.stringify(responseJson, null, 2)\n              )\n            }\n          >\n            {JSON.stringify(responseJson, null, 2)}\n          </CodeSnippet>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Chat;\n","import GithubIcon32 from '@carbon/icons-react/lib/logo--github/32';\nimport SettingsIcon32 from '@carbon/icons-react/lib/settings/32';\nimport { Loading, ModalWrapper, TextInput } from 'carbon-components-react';\nimport {\n  Header,\n  HeaderGlobalAction,\n  HeaderGlobalBar,\n  HeaderName\n} from 'carbon-components-react/lib/components/UIShell';\nimport React, { useState } from 'react';\nimport { GENERIC_ERROR } from '../constants';\n\nconst AppHeader = ({ setNotification }) => {\n  const [apikey, setApikey] = useState('');\n  const [url, setUrl] = useState('');\n  const [assistantId, setAssistantId] = useState('');\n  const [skill, setSkill] = useState('');\n  const [pw, setPw] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const changeCredentialsHandler = async () => {\n    setLoading(true);\n    const rawResponse = await fetch('/api/credentials', {\n      method: 'POST',\n      body: JSON.stringify({\n        password: pw,\n        apikey,\n        url,\n        assistantId,\n        skill\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    setLoading(false);\n    if (rawResponse.ok !== true) {\n      setNotification({\n        type: 'error',\n        title: 'Error',\n        msg: GENERIC_ERROR\n      });\n    } else {\n      const response = await rawResponse.json();\n      if (response.err === true) {\n        setNotification({\n          type: 'error',\n          title: 'Error',\n          msg: response.msg\n        });\n      } else {\n        setNotification({\n          type: 'success',\n          title: 'Éxito',\n          msg: response.msg\n        });\n      }\n    }\n  };\n\n  let spinner = null;\n  if (loading === true) spinner = <Loading description='Cargando...' />;\n\n  return (\n    <Header aria-label={`Maratona Behind the Code 2020 Desafío 1`}>\n      <HeaderName href='/' prefix='Maratona Behind the Code 2020'>\n        Desafío 1\n      </HeaderName>\n      <HeaderGlobalBar>\n        <HeaderGlobalAction\n          aria-label='GitHub'\n          onClick={() =>\n            window.open('https://github.com/maratonadev-la/desafio-1-2020')\n          }\n        >\n          <GithubIcon32 />\n        </HeaderGlobalAction>\n        <ModalWrapper\n          modalLabel='Modificar credenciales'\n          modalHeading={\n            'Para usar un asistente diferente, ingresa tus credenciales de Watson Assistant y tu contraseña'\n          }\n          primaryButtonText='Enviar'\n          secondaryButtonText='Cancelar'\n          iconDescription='Modificar credenciales'\n          renderTriggerButtonIcon={() => <SettingsIcon32 />}\n          buttonTriggerClassName='icon-button'\n          style={{ textAlign: 'left' }}\n          handleSubmit={changeCredentialsHandler}\n        >\n          <TextInput\n            id='apikey'\n            placeholder='Inserta tu API key aquí...'\n            labelText='Clave API del servicio Watson Assistant (API KEY)'\n            value={apikey}\n            onChange={(e) => setApikey(e.target.value)}\n          />\n          <br />\n          <TextInput\n            id='url'\n            placeholder='Inserta tu URL aquí...'\n            labelText='URL para la llamada a la API del servicio Watson Assistant'\n            value={url}\n            onChange={(e) => setUrl(e.target.value)}\n          />\n          <br />\n          <TextInput\n            id='assistantId'\n            placeholder='Inserta tu Assistant ID aquí...'\n            labelText='ID del Watson Assistant (Assistant ID)'\n            value={assistantId}\n            onChange={(e) => setAssistantId(e.target.value)}\n          />\n          <br />\n          <TextInput\n            id='skill'\n            placeholder='Inserta tu Skill ID aquí...'\n            labelText='ID de la skill del Watson Assistant (Skill ID)'\n            value={skill}\n            onChange={(e) => setSkill(e.target.value)}\n          />\n          <br />\n          <TextInput\n            id='password'\n            type='password'\n            placeholder='Inserta tu contraseña aquí...'\n            labelText='Contraseña elegida durante el despliegue'\n            value={pw}\n            onChange={(e) => setPw(e.target.value)}\n          />\n          {spinner}\n        </ModalWrapper>\n      </HeaderGlobalBar>\n    </Header>\n  );\n};\n\nexport default AppHeader;\n","import { Loading, ModalWrapper, TextInput } from 'carbon-components-react';\nimport React, { useState } from 'react';\nimport { GENERIC_ERROR } from '../constants';\n\nconst SidePanel = ({ setNotification }) => {\n  const [pw, setPw] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setLoading(true);\n    const rawResponse = await fetch('/api/submit', {\n      method: 'POST',\n      body: JSON.stringify({\n        password: pw\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (rawResponse.ok !== true) {\n      setNotification({\n        type: 'error',\n        title: 'Error',\n        msg: GENERIC_ERROR\n      });\n    } else {\n      const response = await rawResponse.json();\n      if (response.err === true) {\n        setNotification({\n          type: 'error',\n          title: 'Error',\n          msg: response.msg\n        });\n      } else {\n        setNotification({\n          type: 'success',\n          title: '¡Ya casi terminamos!',\n          msg: response.msg\n        });\n      }\n    }\n    setLoading(false);\n  };\n\n  let spinner = null;\n  if (loading === true) {\n    spinner = <Loading description='Enviando...' />;\n  }\n\n  return (\n    <div\n      className='bx--header-panel bx--header-panel--expanded side-panel'\n      style={{ zIndex: 2 }}\n    >\n      <h2>Desafío 1 | Alestra</h2>\n      <br />\n      <p style={{ textAlign: 'center' }}>\n        Desarrolla un asistente virtual que identifica y responde adecuadamente\n        a los intents de Saludo, Adios y Request. Para el intent de Request el\n        asistente debe responder informando el tipo de solicitud y aplicación,\n        junto con un número de ticket generado para esta solicitud.\n      </p>\n      <br />\n      <ModalWrapper\n        shouldSubmitOnEnter\n        buttonTriggerText='Enviar'\n        modalHeading='Atención: Después de hacer clic en enviar, recibirás un correo electrónico pidiéndote que confirmes tu envío haciendo clic en un enlace. Debes hacer clic en el enlace para completar el envío.'\n        modalLabel='Envío'\n        primaryButtonText='Enviar'\n        secondaryButtonText='Cancelar'\n        handleSubmit={submitHandler}\n        style={{ zIndex: 99999 }}\n      >\n        <TextInput\n          id='password'\n          type='password'\n          value={pw}\n          onChange={(e) => setPw(e.target.value)}\n          labelText='Ingresa la contraseña elegida durante el despliegue para enviar'\n          placeholder='Inserta tu contraseña aquí...'\n        />\n        {spinner}\n      </ModalWrapper>\n    </div>\n  );\n};\n\nexport default SidePanel;\n","import React, { useState } from 'react';\nimport { ToastNotification } from 'carbon-components-react';\nimport Chat from './components/Chat';\nimport Header from './components/Header';\nimport SidePanel from './components/SidePanel';\n\nfunction App() {\n  const [notification, setNotification] = useState(null);\n\n  let notificationComponent = null;\n  if (notification) {\n    notificationComponent = (\n      <ToastNotification\n        lowContrast\n        kind={notification.type}\n        title={notification.title}\n        subtitle={notification.msg}\n        caption={null}\n        style={{\n          zIndex: 10000,\n          position: 'fixed',\n          bottom: '1rem',\n          right: '17rem'\n        }}\n        onCloseButtonClick={() => setNotification(null)}\n      />\n    );\n  }\n\n  return (\n    <>\n      <Header setNotification={setNotification} />\n      <SidePanel setNotification={setNotification} />\n      <div\n        className='bx--grid'\n        style={{\n          marginTop: '5rem',\n          marginRight: '16rem',\n          paddingBottom: '1rem',\n          height: 'calc(100vh - 5rem)',\n          position: 'relative'\n        }}\n      >\n        <Chat setNotification={setNotification} />\n        {notificationComponent}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}